  /**
   {{#functionDocumentation}}
   {{.}}
   {{/functionDocumentation}}
   */
  public async {{functionName}} ({{parameterSignature}}) {

    const logMessagePrefix = '{{clientLibraryName}}.{{functionName}}() ';
    {{#urlParamsConstructorArray}}
    {{.}}
    {{/urlParamsConstructorArray}}
    // build the request options to pass to request-promise
    const options = {
      headers: {
        {{#headersCustom}}
        {{.}}
        {{/headersCustom}}
      },
      json: true,
      method: 'GET',
      resolveWithFullResponse: true,
      url: `${this.apiServerUrl}{{endpointPath}}{{urlParamsString}}`
    };

    // make the request and return the response to the caller
    return await requestPromise (options)
      .then ((response: any) => {
        
        // return the full response (typically, the response.body contains the data needed, but response.headers is often of use)
      
        return response;
      })
      .catch ( (errorResponse: any) => {
        
        // log some output since we've gotten a failure, visual clue for the developers using the client
        console.log (`${logMessagePrefix} There was an error calling the API.`);
        const error = {
          errorMessage: `${logMessagePrefix} There was an error calling the API.`,
          errorResponse: errorResponse
        }

        return error;
      });

  }
