  /**
   {{#functionDocumentation}}
   {{.}}
   {{/functionDocumentation}}
   */
  public async {{functionName}} ({{parameterSignature}}) {

    const logMessagePrefix = '{{clientLibraryName}}.{{functionName}}() ';

    const options = {
      headers: {
        {{#headersCustom}}
        {{.}}
        {{/headersCustom}}
      },
      json: true,
      method: 'DELETE',
      resolveWithFullResponse: true,
      url: `${this.apiServerUrl}{{endpointPath}}{{urlParamsString}}`
    };

    return await requestPromise (options)
      .then ((response: any) => {
        console.log (`TODO: add debug mode DEBUG -- ${logMessagePrefix} API JSON response ${require ('util').inspect (response, {colors: true, depth: 2})}`);

        return response;
      })
      . catch ( (errorResponse: any) => {
        console.log (`${logMessagePrefix} There was an error calling the API.`);
        console.log (`TODO: add debug mode DEBUG -- ${logMessagePrefix} API JSON errorResponse ${require ('util').inspect (errorResponse, {colors: true, depth: 2})}`);

        return errorResponse;
      });

  }
